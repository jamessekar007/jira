// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserType {
  id        Int      @id @default(autoincrement())
  name      String
  users     User[] // This is the opposite relation field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id         Int      @id @default(autoincrement())
  userTypeId Int
  userType   UserType @relation(fields: [userTypeId], references: [id])
  task Task[]
  projects Project[]
  name       String
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([email, userTypeId]) // Index on email and userTypeId
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String
  task     Task[] // This is the opposite relation field
  user     User[] // This is the opposite relation field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id        Int      @id @default(autoincrement())
  name      String
  projectId Int
  project   Project   @relation(fields: [projectId], references: [id]) // Task belongs to one Project
  userId Int
  user   User @relation(fields: [userId], references: [id])
  startDate  DateTime
  endDate  DateTime
  estimatedTime Float
  status Int // 0-Todo, 1-Inprogess, 2-Done, 3-In Review, 4-Approved, 5-Rejected, 6-Deleted
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@index([projectId, userId]) // Index on userId and userId
}
